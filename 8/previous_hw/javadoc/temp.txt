import java.util.Scanner;

import citymanagement.Menu;
import infrastructure.Building;
import infrastructure.BuildingType;
import infrastructure.House;
import infrastructure.Market;
import infrastructure.Office;
import infrastructure.PlayGround;
import infrastructure.Side;
import infrastructure.Street;
import skyline.Skyline;

class Driver{
	private static int streetLength;
	private static Street street;
	private static Scanner input;
	
	public static void main(String[] args) {
		
		
		
		Street street = new Street(50);
		street.add(new House("sarwar", 10, 10, Side.left, 0, 3, "red"));
		street.add(new House("swr", 5, 15, Side.left, 5, 2, "green"));
		street.add(new Office("unknown", 10, 13, Side.left, 7, "not specified"));
		//street.add(new PlayGround(5, Side.left, 15));
		
		Skyline sk = new Skyline(street.left());
		sk.printSkyline();
		
		
		
//		Menu.welcomeMsg();
//		
//		input = new Scanner(System.in);
//		streetLength = getStreetLength();
//		street = new Street(streetLength);
//		boolean program = true;
//		
//		
//		while(program) {
//			int mainMenuResponse = mainMenu();
//			if(mainMenuResponse ==1) {
//				int editingModeResponse = editingMode();
//				if(editingModeResponse == 1) {
//					buildingOptions();
//				}else {
//					System.out.println("remove a  building");
//				}
//			}else if (mainMenuResponse == 2) {
//				System.out.println("Entering Viewing Mode");
//			}
//			if(mainMenuResponse ==0 ) {
//				System.out.println("Exiting Program ...");
//				return;
//			}
//		}
//		input.close();
//		return;
	}
	
	
	private static void buildingOptions() {
		boolean validResponse = false;
		while(!validResponse) {
			try {
				Menu.typeOptions();
				System.out.print("\nChose a Building Type : ");
				int type = input.nextInt();
				if(type >=0 && type <=4) {
					if(type == 0 ) return ;
					else if (type == 1) addBuilding(BuildingType.office);
					else if (type == 2) addBuilding(BuildingType.house);
					else if (type == 3) addBuilding(BuildingType.market);
					else if (type == 4) addBuilding(BuildingType.playground);
					validResponse= true;
				}
			} catch (Exception e) {
				input.nextLine();
				System.out.println("Invalid Choice !!!");
			}
			
		}
		
		
		
	}
	
	private static void addBuilding(BuildingType type) {
		switch (type) {
		case office:
			System.out.println(addOffice());
			break;
		case house:
			System.out.println(addHouse());
			break;
		case market:
			System.out.println(addMarket());
			break;
		case playground:
			System.out.println(addPlayGround());
			break;
		default:
			break;
		}
	}
	
	private static String addPlayGround() {
		int length, position;
		Side side = null;
		try {
			System.out.print("Enter Length : ");
			length = input.nextInt();
			if(length < 0 || length > street.getLength()) {
				return "invalid length\n";
			}
			System.out.print("Enter position : ");
			position = input.nextInt();
			if(position < 0 || position > street.getLength()) {
				return "invalid position !!!";
			}
			side = pickSide();
			PlayGround pl = new PlayGround(length, side, position);
			if(street.add(pl)) {
				return "Playground Added Successfully (street length - "+street.getLength()+ ") : \n"+pl.toString();
			}
			
		} catch (Exception e) {
			input.nextLine();
			return "Invalid Input !!!";
		}
		
		
		return "Failed to Add PlayGround";
	}
	
	private static String addMarket() {
		int length, height , position;
		String owner,openingTime,closingTime;
		Side side = null;
		try {
			System.out.print("Enter Length : ");
			length = input.nextInt();
			if(length < 0 || length > street.getLength()) {
				return "invalid length\n";
			}
			System.out.print("Enter Height : ");
			height = input.nextInt();
			System.out.print("Enter position : ");
			position = input.nextInt();
			if(position < 0 || position > street.getLength()) {
				return "invalid position !!!";
			}
			input.nextLine();
			System.out.print("Enter Owner Name : ");
			owner = input.nextLine();
			System.out.print("Enter Opening Time : ");
			openingTime = input.nextLine();
			System.out.print("Enter Closing Time : ");
			closingTime = input.nextLine();
			side = pickSide();
			Market market = new Market(owner, length, height, side, position, openingTime, closingTime);
			if(street.add(market)) {
				return "Market Added Successfully(street length - "+street.getLength()+") : \n"+market.toString();
			}
			
		} catch (Exception e) {
			input.nextLine();
			return "Invalid Input !!!";
		}
		
		
		return "Failed to Add Market";
	}
	
	private static String addHouse() {
		int length, height , position, rooms;
		String owner,color;
		Side side = null;
		try {
			System.out.print("Enter Length : ");
			length = input.nextInt();
			if(length < 0 || length > street.getLength()) {
				return "invalid length\n";
			}
			System.out.print("Enter Height : ");
			height = input.nextInt();
			System.out.print("Enter position : ");
			position = input.nextInt();
			if(position < 0 || position > street.getLength()) {
				return "invalid position !!!";
			}
			System.out.print("Enter Number of Rooms : ");
			rooms = input.nextInt();
			input.nextLine();
			System.out.print("Enter Owner Name : ");
			owner = input.nextLine();
			System.out.print("Enter Color of the House : ");
			color = input.nextLine();
			side = pickSide();
			Building building = new House(owner, length, height, side, position, rooms, color);
			if(street.add(building)) {
				return "House Added Successfully (street length - "+street.getLength()+") :\n"+building.toString();
			}
			
		} catch (Exception e) {
			input.nextLine();
			return "Invalid Input !!!";
		}
		
		
		return "Failed to Add House";
	}
	
	
	
	private static Side pickSide() {
		while(true) {
			try {
				Menu.sideOptions();
				System.out.print("Choose side of the street : ");
				int response  = input.nextInt();
				if(response == 1) {
					return Side.left;
				}else if (response == 2) {
					return Side.right;
				}else {
					System.out.println("Invalid Choice !!!");
				}
			} catch (Exception e) {
				System.out.println("Invalid Input !!!");
				input.nextLine();
			}
		}
	}
	
	private static String addOffice() {
		int length, height , position;
		String owner,jobType;
		Side side = null;
		try {
			System.out.print("Enter Length : ");
			length = input.nextInt();
			if(length < 0 || length > street.getLength()) {
				return "invalid length\n";
			}
			System.out.print("Enter Height : ");
			height = input.nextInt();
			System.out.print("Enter position : ");
			position = input.nextInt();
			if(position < 0 || position > street.getLength()) {
				return "invalid position !!!";
			}
			input.nextLine();
			System.out.print("Enter Owner Name : ");
			owner = input.nextLine();
			System.out.print("Enter Job Type : ");
			jobType = input.nextLine();
			side = pickSide();
			Office office = new Office(owner, length, height, side, position, jobType);
			if(street.add(office)) {
				return "Office Added Successfully (street length - "+street.getLength()+"): \n"+office.toString();
			}
			
		} catch (Exception e) {
			input.nextLine();
			return "Invalid Input !!!";
		}
		
		
		return "Failed to Add Office";
	}
	
	
	
	private static int editingMode() {
		int response = -1;
		boolean validResponse = false;
		while(!validResponse) {
			try {
				Menu.editingOption();
				System.out.print("Enter Your Choice : ");
				response = input.nextInt();
				if(response == 0 || response == 1 || response == 2 ) {
					validResponse = true;
				}
			} catch (Exception e) {
				input.nextLine();
				System.out.println("Invalid Input !!!");
			}
		}
		return response;
	}
	
	
	private static int mainMenu() {
		
		int response = -1;
		boolean validResponse = false;
		while(!validResponse) {
			try {
				Menu.mainMenuOptions();
				System.out.print("Enter Your Choice : ");
				response = input.nextInt();
				if(response == 0 || response ==1 || response ==2) {
					validResponse = true;
				}
				
			} catch (Exception e) {
				input.nextLine();
				System.out.println("Invalid Input !!!");
			}
		}
		return response;
	}
	
	
	
	private static int getStreetLength() {
		int streetLength = 0 ;
		boolean validInput = false;
		
		while(!validInput) {
			try {
				Menu.streetOption();
				streetLength = input.nextInt();
				if(streetLength <= 0) {
					System.out.println("Try positive integer which is greate than zero");
				}else
					validInput = true;
			} catch (Exception e) {
				System.out.println("Invalid Input !!!");
				input.nextLine();
			}
		}
		return streetLength;
		
	}
}

